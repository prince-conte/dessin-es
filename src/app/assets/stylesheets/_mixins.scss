@charset "UTF-8";

// Media queries
@mixin mq($mq-breakpoint) {
    @if $enable-mq == true {
        @if map-has-key($mq-breakpoints, $mq-breakpoint) {
            $mq-device: '';
            @if $enable-mq-device == true {
                $mq-device: '-device';
            }

            $mq-range: 'min';
            @if $mq-breakpoint == nth(map-keys($mq-breakpoints), 1) {
                $mq-range: 'max';
            }

            @media all and (#{$mq-range}#{$mq-device}-width: map-get($mq-breakpoints, $mq-breakpoint)) {
                @content;
            }
        }
    }
}

// Container
@mixin container {
    width: 100%;
    margin: {
        right: auto;
        left: auto;
    };

    @if $enable-mq == true {
        @each $mq-container-width in $mq-container-widths {
            $mq: nth($mq-container-width, 1);
            $container-width: nth($mq-container-width, 2);

            @include mq($mq) {
                width: $container-width;
            }
        }

        @each $mq-container-indent in $mq-container-indents {
            $mq: nth($mq-container-indent, 1);
            $container-indent: nth($mq-container-indent, 2);

            @include mq($mq) {
                padding: {
                    right: $container-indent;
                    left:  $container-indent;
                };
            }
        }
    } @else {
        width: $container-width;

        padding: {
            right: $container-indent;
            left: $container-indent;
        };
    }
}

// Grid
@mixin grid($main-axis: x, $justify-content: flex-start, $align-items: flex-start) {
    display: flex;
    justify-content: $justify-content;
    align-items: $align-items;

    @if $main-axis == x {
        flex-wrap: wrap;
        align-content: flex-start;
    }

    @if $main-axis == y {
        flex-direction: column;
    }

    @if $enable-mq == true {
        @each $mq-grid-gutter in $mq-grid-gutters {
            $mq: nth($mq-grid-gutter, 1);
            $gutter: -#{nth($mq-grid-gutter, 2) / 2};

            @include mq($mq) {
                margin: {
                    right: $gutter;
                    left:  $gutter;
                };
            }
        }
    } @else {
        $gutter: -$grid-gutter / 2;

        margin: {
            right: $gutter;
            left:  $gutter;
        };
    }
}

// Grid col
@mixin grid-col {
    @if $enable-mq == true {
        @each $mq-grid-gutter in $mq-grid-gutters {
            $mq: nth($mq-grid-gutter, 1);
            $gutter: nth($mq-grid-gutter, 2) / 2;

            @include mq($mq) {
                padding: {
                    right: $gutter;
                    left:  $gutter;
                };
            }
        }
    } @else {
        $gutter: $grid-gutter / 2;

        padding: {
            right: $gutter;
            left:  $gutter;
        };
    }
}

// Col size
@mixin col-size($size) {
    width: $size * 100%;
}

// Ellipsis
// https://github.com/thoughtbot/bourbon/blob/master/core/bourbon/library/_ellipsis.scss
@mixin ellipsis($width: 100%, $display: inline-block) {
    display: $display;
    max-width: $width;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    word-wrap: normal;
}

// Font
@mixin font($font-size, $line-height: $font-size) {
    font-size: $font-size;
    line-height: strip-units($line-height) / strip-units($font-size);
}

// Interact
@mixin interact($properties-list, $values-list, $state: hover) {
    $properties-length: length($properties-list);
    $values-length: length($values-list);

    @if $properties-length == $values-length {
        .mod_no-touchevents & {
            &:#{$state},
            &.#{$state} {
                @for $i from 1 through $properties-length {
                    #{nth($properties-list, $i)}: nth($values-list, $i);
                }
            }
        }
    } @else {
        @error "The number of properties (#{$properties-list}) and values (#{$values-list}) are not equal."
    }
}

// Size
@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}

// Text
@mixin text-large {
    @include font(1.9rem, 2.5rem);
}

@mixin text-base {
    @include font(1.5rem, 2.2rem);
}

@mixin text-small {
    @include font(1rem, 1.5rem);
}

// Headings
@mixin heading {
    font-family: $font-family-title;

    a {
        text-decoration: none;
    }
}

@mixin h1($font-weight: $heading-font-weight-base) {
    @include heading;
    @include font(3rem, 3.5rem);
    margin-top: 0;
    font-weight: $font-weight;

    @include mq(md) {
        @include font(4.6rem, 5.5rem);
    }
}

@mixin h2($font-weight: $heading-font-weight-base) {
    @include heading;
    @include font(2.5rem, 3rem);
    font-weight: $font-weight;

    @include mq(md) {
        @include font(3.6rem, 4rem);
    }
}

@mixin h3($font-weight: $heading-font-weight-base) {
    @include heading;
    @include font(2.5rem, 3rem);
    font-weight: $font-weight;

    @include mq(md) {
        @include font(3rem, 3.5rem);
    }
}

@mixin h4($font-weight: $heading-font-weight-base) {
    @include heading;
    @include font(2.5rem, 3rem);
    font-weight: $font-weight;

    @include mq(md) {
        @include font(3rem, 3.5rem);
    }
}

@mixin h5() {
    @include font(1.9rem, 2.4rem);
    @include heading;
    font-weight: 500;
}

@mixin h6($font-weight: $heading-font-weight-base) {
    @include heading;
    @include font(1.3rem,1.8rem);
    font-weight: $font-weight;
    text-transform: uppercase;
}

// bourbon triangle

@mixin triangle($size, $color, $direction) {
    $width: nth($size, 1);
    $height: nth($size, length($size));
    $foreground-color: nth($color, 1);
    $background-color: if(length($color) == 2, nth($color, 2), transparent);
    height: 0;
    width: 0;

    @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
        $width: $width / 2;
        $height: if(length($size) > 1, $height, $height/2);

        @if $direction == up {
            border-bottom: $height solid $foreground-color;
            border-left: $width solid $background-color;
            border-right: $width solid $background-color;
        } @else if $direction == right {
            border-bottom: $width solid $background-color;
            border-left: $height solid $foreground-color;
            border-top: $width solid $background-color;
        } @else if $direction == down {
            border-left: $width solid $background-color;
            border-right: $width solid $background-color;
            border-top: $height solid $foreground-color;
        } @else if $direction == left {
            border-bottom: $width solid $background-color;
            border-right: $height solid $foreground-color;
            border-top: $width solid $background-color;
        }
    } @else if ($direction == up-right) or ($direction == up-left) {
        border-top: $height solid $foreground-color;

        @if $direction == up-right {
            border-left:  $width solid $background-color;
        } @else if $direction == up-left {
            border-right: $width solid $background-color;
        }
    } @else if ($direction == down-right) or ($direction == down-left) {
        border-bottom: $height solid $foreground-color;

        @if $direction == down-right {
            border-left:  $width solid $background-color;
        } @else if $direction == down-left {
            border-right: $width solid $background-color;
        }
    } @else if ($direction == inset-up) {
        border-color: $background-color $background-color $foreground-color;
        border-style: solid;
        border-width: $height $width;
    } @else if ($direction == inset-down) {
        border-color: $foreground-color $background-color $background-color;
        border-style: solid;
        border-width: $height $width;
    } @else if ($direction == inset-right) {
        border-color: $background-color $background-color $background-color $foreground-color;
        border-style: solid;
        border-width: $width $height;
    } @else if ($direction == inset-left) {
        border-color: $background-color $foreground-color $background-color $background-color;
        border-style: solid;
        border-width: $width $height;
    }
}
